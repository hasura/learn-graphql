schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}

"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}

"mutation root"
type mutation_root {
  "delete data from the table: \"online_users\""
  delete_online_users("filter the rows which have to be deleted" where: online_users_bool_exp!): online_users_mutation_response
  "delete data from the table: \"todos\""
  delete_todos("filter the rows which have to be deleted" where: todos_bool_exp!): todos_mutation_response
  "delete single row from the table: \"todos\""
  delete_todos_by_pk(id: Int!): todos
  "delete data from the table: \"users\""
  delete_users("filter the rows which have to be deleted" where: users_bool_exp!): users_mutation_response
  "delete single row from the table: \"users\""
  delete_users_by_pk(id: String!): users
  "insert data into the table: \"online_users\""
  insert_online_users("the rows to be inserted" objects: [online_users_insert_input!]!): online_users_mutation_response
  "insert a single row into the table: \"online_users\""
  insert_online_users_one("the row to be inserted" object: online_users_insert_input!): online_users
  "insert data into the table: \"todos\""
  insert_todos("the rows to be inserted" objects: [todos_insert_input!]! "upsert condition" on_conflict: todos_on_conflict): todos_mutation_response
  "insert a single row into the table: \"todos\""
  insert_todos_one("the row to be inserted" object: todos_insert_input! "upsert condition" on_conflict: todos_on_conflict): todos
  "insert data into the table: \"users\""
  insert_users("the rows to be inserted" objects: [users_insert_input!]! "upsert condition" on_conflict: users_on_conflict): users_mutation_response
  "insert a single row into the table: \"users\""
  insert_users_one("the row to be inserted" object: users_insert_input! "upsert condition" on_conflict: users_on_conflict): users
  "update data of the table: \"online_users\""
  update_online_users("sets the columns of the filtered rows to the given values" _set: online_users_set_input "filter the rows which have to be updated" where: online_users_bool_exp!): online_users_mutation_response
  "update multiples rows of table: \"online_users\""
  update_online_users_many("updates to execute, in order" updates: [online_users_updates!]!): [online_users_mutation_response]
  "update data of the table: \"todos\""
  update_todos("increments the numeric columns with given value of the filtered values" _inc: todos_inc_input "sets the columns of the filtered rows to the given values" _set: todos_set_input "filter the rows which have to be updated" where: todos_bool_exp!): todos_mutation_response
  "update single row of the table: \"todos\""
  update_todos_by_pk("increments the numeric columns with given value of the filtered values" _inc: todos_inc_input "sets the columns of the filtered rows to the given values" _set: todos_set_input pk_columns: todos_pk_columns_input!): todos
  "update multiples rows of table: \"todos\""
  update_todos_many("updates to execute, in order" updates: [todos_updates!]!): [todos_mutation_response]
  "update data of the table: \"users\""
  update_users("sets the columns of the filtered rows to the given values" _set: users_set_input "filter the rows which have to be updated" where: users_bool_exp!): users_mutation_response
  "update single row of the table: \"users\""
  update_users_by_pk("sets the columns of the filtered rows to the given values" _set: users_set_input pk_columns: users_pk_columns_input!): users
  "update multiples rows of table: \"users\""
  update_users_many("updates to execute, in order" updates: [users_updates!]!): [users_mutation_response]
}

"columns and relationships of \"online_users\""
type online_users {
  id: String
  last_seen: timestamptz
  "An object relationship"
  user: users
}

"aggregated selection of \"online_users\""
type online_users_aggregate {
  aggregate: online_users_aggregate_fields
  nodes: [online_users!]!
}

"aggregate fields of \"online_users\""
type online_users_aggregate_fields {
  count(columns: [online_users_select_column!] distinct: Boolean): Int!
  max: online_users_max_fields
  min: online_users_min_fields
}

"Boolean expression to filter rows from the table \"online_users\". All fields are combined with a logical 'AND'."
input online_users_bool_exp {
  _and: [online_users_bool_exp!]
  _not: online_users_bool_exp
  _or: [online_users_bool_exp!]
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  user: users_bool_exp
}

"input type for inserting data into table \"online_users\""
input online_users_insert_input {
  id: String
  last_seen: timestamptz
  user: users_obj_rel_insert_input
}

"aggregate max on columns"
type online_users_max_fields {
  id: String
  last_seen: timestamptz
}

"aggregate min on columns"
type online_users_min_fields {
  id: String
  last_seen: timestamptz
}

"response of any mutation on the table \"online_users\""
type online_users_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [online_users!]!
}

"Ordering options when selecting data from \"online_users\"."
input online_users_order_by {
  id: order_by
  last_seen: order_by
  user: users_order_by
}

"select columns of table \"online_users\""
enum online_users_select_column {
  "column name"
  id
  "column name"
  last_seen
}

"input type for updating data in table \"online_users\""
input online_users_set_input {
  id: String
  last_seen: timestamptz
}

"Streaming cursor of the table \"online_users\""
input online_users_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: online_users_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input online_users_stream_cursor_value_input {
  id: String
  last_seen: timestamptz
}

input online_users_updates {
  "sets the columns of the filtered rows to the given values"
  _set: online_users_set_input
  where: online_users_bool_exp!
}

"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}

type query_root {
  "fetch data from the table: \"online_users\""
  online_users("distinct select on columns" distinct_on: [online_users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [online_users_order_by!] "filter the rows returned" where: online_users_bool_exp): [online_users!]!
  "fetch aggregated fields from the table: \"online_users\""
  online_users_aggregate("distinct select on columns" distinct_on: [online_users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [online_users_order_by!] "filter the rows returned" where: online_users_bool_exp): online_users_aggregate!
  "An array relationship"
  todos("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): [todos!]!
  "An aggregate relationship"
  todos_aggregate("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): todos_aggregate!
  "fetch data from the table: \"todos\" using primary key columns"
  todos_by_pk(id: Int!): todos
  "fetch data from the table: \"users\""
  users("distinct select on columns" distinct_on: [users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [users_order_by!] "filter the rows returned" where: users_bool_exp): [users!]!
  "fetch aggregated fields from the table: \"users\""
  users_aggregate("distinct select on columns" distinct_on: [users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [users_order_by!] "filter the rows returned" where: users_bool_exp): users_aggregate!
  "fetch data from the table: \"users\" using primary key columns"
  users_by_pk(id: String!): users
}

type subscription_root {
  "fetch data from the table: \"online_users\""
  online_users("distinct select on columns" distinct_on: [online_users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [online_users_order_by!] "filter the rows returned" where: online_users_bool_exp): [online_users!]!
  "fetch aggregated fields from the table: \"online_users\""
  online_users_aggregate("distinct select on columns" distinct_on: [online_users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [online_users_order_by!] "filter the rows returned" where: online_users_bool_exp): online_users_aggregate!
  "fetch data from the table in a streaming manner: \"online_users\""
  online_users_stream("maximum number of rows returned in a single batch" batch_size: Int! "cursor to stream the results returned by the query" cursor: [online_users_stream_cursor_input]! "filter the rows returned" where: online_users_bool_exp): [online_users!]!
  "An array relationship"
  todos("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): [todos!]!
  "An aggregate relationship"
  todos_aggregate("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): todos_aggregate!
  "fetch data from the table: \"todos\" using primary key columns"
  todos_by_pk(id: Int!): todos
  "fetch data from the table in a streaming manner: \"todos\""
  todos_stream("maximum number of rows returned in a single batch" batch_size: Int! "cursor to stream the results returned by the query" cursor: [todos_stream_cursor_input]! "filter the rows returned" where: todos_bool_exp): [todos!]!
  "fetch data from the table: \"users\""
  users("distinct select on columns" distinct_on: [users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [users_order_by!] "filter the rows returned" where: users_bool_exp): [users!]!
  "fetch aggregated fields from the table: \"users\""
  users_aggregate("distinct select on columns" distinct_on: [users_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [users_order_by!] "filter the rows returned" where: users_bool_exp): users_aggregate!
  "fetch data from the table: \"users\" using primary key columns"
  users_by_pk(id: String!): users
  "fetch data from the table in a streaming manner: \"users\""
  users_stream("maximum number of rows returned in a single batch" batch_size: Int! "cursor to stream the results returned by the query" cursor: [users_stream_cursor_input]! "filter the rows returned" where: users_bool_exp): [users!]!
}

scalar timestamptz

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"columns and relationships of \"todos\""
type todos {
  created_at: timestamptz!
  id: Int!
  is_completed: Boolean!
  is_public: Boolean!
  title: String!
  "An object relationship"
  user: users!
  user_id: String!
}

"aggregated selection of \"todos\""
type todos_aggregate {
  aggregate: todos_aggregate_fields
  nodes: [todos!]!
}

input todos_aggregate_bool_exp {
  bool_and: todos_aggregate_bool_exp_bool_and
  bool_or: todos_aggregate_bool_exp_bool_or
  count: todos_aggregate_bool_exp_count
}

input todos_aggregate_bool_exp_bool_and {
  arguments: todos_select_column_todos_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: todos_bool_exp
  predicate: Boolean_comparison_exp!
}

input todos_aggregate_bool_exp_bool_or {
  arguments: todos_select_column_todos_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: todos_bool_exp
  predicate: Boolean_comparison_exp!
}

input todos_aggregate_bool_exp_count {
  arguments: [todos_select_column!]
  distinct: Boolean
  filter: todos_bool_exp
  predicate: Int_comparison_exp!
}

"aggregate fields of \"todos\""
type todos_aggregate_fields {
  avg: todos_avg_fields
  count(columns: [todos_select_column!] distinct: Boolean): Int!
  max: todos_max_fields
  min: todos_min_fields
  stddev: todos_stddev_fields
  stddev_pop: todos_stddev_pop_fields
  stddev_samp: todos_stddev_samp_fields
  sum: todos_sum_fields
  var_pop: todos_var_pop_fields
  var_samp: todos_var_samp_fields
  variance: todos_variance_fields
}

"order by aggregate values of table \"todos\""
input todos_aggregate_order_by {
  avg: todos_avg_order_by
  count: order_by
  max: todos_max_order_by
  min: todos_min_order_by
  stddev: todos_stddev_order_by
  stddev_pop: todos_stddev_pop_order_by
  stddev_samp: todos_stddev_samp_order_by
  sum: todos_sum_order_by
  var_pop: todos_var_pop_order_by
  var_samp: todos_var_samp_order_by
  variance: todos_variance_order_by
}

"input type for inserting array relation for remote table \"todos\""
input todos_arr_rel_insert_input {
  data: [todos_insert_input!]!
  "upsert condition"
  on_conflict: todos_on_conflict
}

"aggregate avg on columns"
type todos_avg_fields {
  id: Float
}

"order by avg() on columns of table \"todos\""
input todos_avg_order_by {
  id: order_by
}

"Boolean expression to filter rows from the table \"todos\". All fields are combined with a logical 'AND'."
input todos_bool_exp {
  _and: [todos_bool_exp!]
  _not: todos_bool_exp
  _or: [todos_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  is_completed: Boolean_comparison_exp
  is_public: Boolean_comparison_exp
  title: String_comparison_exp
  user: users_bool_exp
  user_id: String_comparison_exp
}

"unique or primary key constraints on table \"todos\""
enum todos_constraint {
  "unique or primary key constraint on columns \"id\""
  todos_pkey
}

"input type for incrementing numeric columns in table \"todos\""
input todos_inc_input {
  id: Int
}

"input type for inserting data into table \"todos\""
input todos_insert_input {
  created_at: timestamptz
  id: Int
  is_completed: Boolean
  is_public: Boolean
  title: String
  user: users_obj_rel_insert_input
  user_id: String
}

"aggregate max on columns"
type todos_max_fields {
  created_at: timestamptz
  id: Int
  title: String
  user_id: String
}

"order by max() on columns of table \"todos\""
input todos_max_order_by {
  created_at: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"aggregate min on columns"
type todos_min_fields {
  created_at: timestamptz
  id: Int
  title: String
  user_id: String
}

"order by min() on columns of table \"todos\""
input todos_min_order_by {
  created_at: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"response of any mutation on the table \"todos\""
type todos_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [todos!]!
}

"on_conflict condition type for table \"todos\""
input todos_on_conflict {
  constraint: todos_constraint!
  update_columns: [todos_update_column!]! = [  ]
  where: todos_bool_exp
}

"Ordering options when selecting data from \"todos\"."
input todos_order_by {
  created_at: order_by
  id: order_by
  is_completed: order_by
  is_public: order_by
  title: order_by
  user: users_order_by
  user_id: order_by
}

"primary key columns input for table: todos"
input todos_pk_columns_input {
  id: Int!
}

"select columns of table \"todos\""
enum todos_select_column {
  "column name"
  created_at
  "column name"
  id
  "column name"
  is_completed
  "column name"
  is_public
  "column name"
  title
  "column name"
  user_id
}

"select \"todos_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"todos\""
enum todos_select_column_todos_aggregate_bool_exp_bool_and_arguments_columns {
  "column name"
  is_completed
  "column name"
  is_public
}

"select \"todos_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"todos\""
enum todos_select_column_todos_aggregate_bool_exp_bool_or_arguments_columns {
  "column name"
  is_completed
  "column name"
  is_public
}

"input type for updating data in table \"todos\""
input todos_set_input {
  created_at: timestamptz
  id: Int
  is_completed: Boolean
  is_public: Boolean
  title: String
  user_id: String
}

"aggregate stddev on columns"
type todos_stddev_fields {
  id: Float
}

"order by stddev() on columns of table \"todos\""
input todos_stddev_order_by {
  id: order_by
}

"aggregate stddev_pop on columns"
type todos_stddev_pop_fields {
  id: Float
}

"order by stddev_pop() on columns of table \"todos\""
input todos_stddev_pop_order_by {
  id: order_by
}

"aggregate stddev_samp on columns"
type todos_stddev_samp_fields {
  id: Float
}

"order by stddev_samp() on columns of table \"todos\""
input todos_stddev_samp_order_by {
  id: order_by
}

"Streaming cursor of the table \"todos\""
input todos_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: todos_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input todos_stream_cursor_value_input {
  created_at: timestamptz
  id: Int
  is_completed: Boolean
  is_public: Boolean
  title: String
  user_id: String
}

"aggregate sum on columns"
type todos_sum_fields {
  id: Int
}

"order by sum() on columns of table \"todos\""
input todos_sum_order_by {
  id: order_by
}

"update columns of table \"todos\""
enum todos_update_column {
  "column name"
  created_at
  "column name"
  id
  "column name"
  is_completed
  "column name"
  is_public
  "column name"
  title
  "column name"
  user_id
}

input todos_updates {
  "increments the numeric columns with given value of the filtered values"
  _inc: todos_inc_input
  "sets the columns of the filtered rows to the given values"
  _set: todos_set_input
  where: todos_bool_exp!
}

"aggregate var_pop on columns"
type todos_var_pop_fields {
  id: Float
}

"order by var_pop() on columns of table \"todos\""
input todos_var_pop_order_by {
  id: order_by
}

"aggregate var_samp on columns"
type todos_var_samp_fields {
  id: Float
}

"order by var_samp() on columns of table \"todos\""
input todos_var_samp_order_by {
  id: order_by
}

"aggregate variance on columns"
type todos_variance_fields {
  id: Float
}

"order by variance() on columns of table \"todos\""
input todos_variance_order_by {
  id: order_by
}

"columns and relationships of \"users\""
type users {
  created_at: timestamptz!
  id: String!
  last_seen: timestamptz
  name: String!
  password: String
  "An array relationship"
  todos("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): [todos!]!
  "An aggregate relationship"
  todos_aggregate("distinct select on columns" distinct_on: [todos_select_column!] "limit the number of rows returned" limit: Int "skip the first n rows. Use only with order_by" offset: Int "sort the rows by one or more columns" order_by: [todos_order_by!] "filter the rows returned" where: todos_bool_exp): todos_aggregate!
}

"aggregated selection of \"users\""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
  count(columns: [users_select_column!] distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: String_comparison_exp
  last_seen: timestamptz_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  todos: todos_bool_exp
  todos_aggregate: todos_aggregate_bool_exp
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
  "unique or primary key constraint on columns \"id\""
  users_pkey
}

"input type for inserting data into table \"users\""
input users_insert_input {
  created_at: timestamptz
  id: String
  last_seen: timestamptz
  name: String
  password: String
  todos: todos_arr_rel_insert_input
}

"aggregate max on columns"
type users_max_fields {
  created_at: timestamptz
  id: String
  last_seen: timestamptz
  name: String
  password: String
}

"aggregate min on columns"
type users_min_fields {
  created_at: timestamptz
  id: String
  last_seen: timestamptz
  name: String
  password: String
}

"response of any mutation on the table \"users\""
type users_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [users!]!
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
  data: users_insert_input!
  "upsert condition"
  on_conflict: users_on_conflict
}

"on_conflict condition type for table \"users\""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = [  ]
  where: users_bool_exp
}

"Ordering options when selecting data from \"users\"."
input users_order_by {
  created_at: order_by
  id: order_by
  last_seen: order_by
  name: order_by
  password: order_by
  todos_aggregate: todos_aggregate_order_by
}

"primary key columns input for table: users"
input users_pk_columns_input {
  id: String!
}

"select columns of table \"users\""
enum users_select_column {
  "column name"
  created_at
  "column name"
  id
  "column name"
  last_seen
  "column name"
  name
  "column name"
  password
}

"input type for updating data in table \"users\""
input users_set_input {
  created_at: timestamptz
  id: String
  last_seen: timestamptz
  name: String
  password: String
}

"Streaming cursor of the table \"users\""
input users_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: users_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input users_stream_cursor_value_input {
  created_at: timestamptz
  id: String
  last_seen: timestamptz
  name: String
  password: String
}

"update columns of table \"users\""
enum users_update_column {
  "column name"
  created_at
  "column name"
  id
  "column name"
  last_seen
  "column name"
  name
  "column name"
  password
}

input users_updates {
  "sets the columns of the filtered rows to the given values"
  _set: users_set_input
  where: users_bool_exp!
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached("measured in seconds" ttl: Int! = 60 "refresh the cache entry" refresh: Boolean! = false) on QUERY